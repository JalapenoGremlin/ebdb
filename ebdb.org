 -*- sentence-end-double-space: t; -*-
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER: @syncodeindex pg cp
#+TITLE: EBDB Manual
#+SUBTITLE: for version 1, updated 3 October, 2014
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: EBDB: (ebdb)
#+TEXINFO_DIR_DESC: Contact management package
#+OPTIONS: *:nil num:t toc:nil
#+MACRO: ebuf \ast{}EBDB\ast{}

* Introduction
This manual is for EBDB version 0.1

   Copyright © 2016 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
* The EBDB Database
EBDB supports multiple databases, and each database definition is
saved in a file on disk.  The default database class, `ebdb-db-file',
stores its contacts in the same file as the database itself, though
other database classes may store contacts elsewhere.

- Variable: ebdb-sources
  User option specifying one or more databases to load.  It can be a
  single element, or a list of elements.  Each element can be a
  filename, from which a database is loaded, or it can be an instance
  of a subclass of the `ebdb-db' class.  The database at the front of
  the list will be considered the default database.

Databases have a few user-facing settings:

- Option: read-only
  If t, records can only be read from the database, not edited or
  deleted.
- Option: auto-save
  Set to nil to prevent auto-saving of the database's records.
- Option: buffer-char
  Set to a single character that will be displayed next to records in
  the {{{ebuf}}} buffer, indicating which database they belong
  to.
- Option: disabled
  When t, the database will essentially be ignored -- no records will
  be read from it.  Setting this to t will only take effect on next
  restart; to disable a database immediately, use
  `ebdb-disable-database' below.
- Option record-class
  The default record class to use when creating new records in this
  database.  The default is `ebdb-default-record-class'.

While it's possible to edit database definitions directly in the file,
it's safer to use the customization interface to do so from the
{{{ebuf}}} buffer.

- Command: ebdb-customize-database db
  Use the customize interface to edit the definition of DB.

Records can be moved or copied from one database to another. It's also
possible for a single record to live in more than one database, though
this functionality is experimental. When a record is loaded from more
than one database, the two copies are compared using the "timestamp"
field, and the older copy is discarded.

- Command: ebdb-move-record record to-db
  More RECORD from its existing database to TO-DB.

- Command: ebdb-copy-record record to-db
  Copy RECORD into TO-DB, leaving it in its existing database(s).

Other database-related commands:

- Command: ebdb-reload-database db
  Reload all records from a database.  This also redisplays and of
  those records that were visible in {{{ebuf}}} buffers.
- Command: ebdb-disable-database db
  This command disables a database, unloading all of its records and
  essentially ignoring it from now on.  The disabled state persists
  between restarts.  To re-enable a database, edit it using
  `ebdb-customize-database', set 'disabled to nil, and then reload it
  with `ebdb-reload-database'.
* Creating records

Create a record using "c" (`ebdb-create') in the {{{ebuf}}} buffer.
With no prefix arg, this command will create an instance of the
default record class, in the database at the head of `ebdb-sources'.

- Variable: ebdb-default-record-class
  The default record class to use when creating new records.

Alternately create a record using "C" (`ebdb-create-extended'), which
will prompt for a record class to use, as well as a database to store
the record in, if there is more than one.
** Record classes
EBDB comes with two record classes, representing individuals and
organizations.
** Record names
EBDB comes with two classes for name fields: "simple" and "complex".
Simple names are just a single string, complex names are split out
into surname, given names, suffix, etc.  All records have a single
canonical name: person records have a complex name, organization
records have a simple name.  In addition, person records can have one
or more "aka" names, and these akas can be either simple or complex.
When adding fields to a record, the simple name class is labeled
"nickname", and the complex class is labeled "alt name".
* Record fields
** Inserting new fields
Press "i" (`ebdb-insert-field') with point on a record will prompt for
a field type, then field values, and add the field to the record.  See
[[id:cb2190f4-f2e6-4082-9671-24e11e5cc0c6][Field types]] for more information about the various kinds of fields.

When entering field data, optional data can be skipped by entering a
blank string, or by pressing "C-g".  The first "C-g" will cancel the
current data prompt; the second "C-g" will cancel the creation of the
field altogether.  For instance, when creating address fields, EBDB
will allow you to create an arbitrary number of street lines.  When
you've added enough, either enter a blank string, or hit "C-g".
** Editing existing fields
Pressing "e" (`ebdb-edit-field') with point on a field will allow you
to edit an existing field, with the previous values as defaults.

Alternately, press "E" (`ebdb-edit-field-customize') to edit the
field's values using the Customize interface.  Some fields have slots
that can only be edited this way; other fields have slots that cannot
be edited at all once the field is created.
** Deleting records and fields
Pressing "C-k" on a field will ask you for confirmation, then delete
the field.  Pressing "C-k" while point is on or before a record's main
name will instead prompt to delete the whole record.
** Field types
:PROPERTIES:
:ID:       cb2190f4-f2e6-4082-9671-24e11e5cc0c6
:END:
Fields can be classed in a few different categories.  Some are
"plumbing" fields, that are present for all records, but not generally
visible or user-editable: these include the creation date, timestamp,
and UUID.  Others are "built-in" fields: basic fields that get special
treatment.  These include the name, mail, phone, address, and notes
fields.  EBDB comes with default classes for these fields: if you
would like to use different defaults, you can create new classes
(inheriting from the existing ones), then set these user options to
your custom class name:

- Variable: ebdb-default-name-class
  Defaults to `ebdb-field-name-complex'.  In fact, person records are
  created with name fields of `ebdb-field-name-complex', and
  organization records are created with `ebdb-field-name-simple'.
- Variable: ebdb-default-mail-class
  Defaults to `ebdb-field-mail'.
- Variable: ebdb-default-phone-class
  Defaults to `ebdb-field-phone'.
- Variable: ebdb-default-address-class
  Defaults to `ebdb-field-address'.
- Variable: ebdb-default-notes-class
  Defaults to `ebdb-field-notes'.

Besides the "plumbing" and "built-in" fields, all other fields belong
to one of two types: `ebdb-field-user' and `ebdb-field-user-simple'.
The former is an abstract class, used to build fields with more
complicated structures.  The latter is a simple class with a string
label and a string value.

When adding fields to a record, EBDB offers up all the known labels of
the simple user field class as possible choices.  Typing in an unknown
string will define a new label, which will be offered as a choice in
the future.

Fields built from `ebdb-field-user' will have their own identifier.
EBDB comes with classes including "anniversary", "url", "id",
"relation", "role" and more.  Many of these fields have their own list
of labels (for instance, anniversary fields may be labeled "birthday",
"wedding", etc).

Loading secondary libraries may make more field types available.
* MUA Interaction
One of EBDB's most important features is the ability to create, update
and display records based on messages received in your mail user
agent.
** Loading MUA code
MUA code is activated simply by loading the relevant library.  Keep in
mind that "MUA" here means both a mail-reading client, and a
mail-sending client.  For instance, if you use the Gnus package for
reading mail, and Message for sending it, you'll want two require
statements:

#+BEGIN_SRC elisp
(require 'ebdb-gnus)
(require 'ebdb-message)
#+END_SRC

There are other packages that provide other functionality: these are
likewise activated simply by requiring the relevant library.
** Display and updating
When you open a message in your MUA, EBDB can react in many different
ways: displaying records for the sender and recipients of the message;
creating new records for unfamiliar mail addresses; and updating
existing records with new information.  EBDB also provides several
interactive commands for editing the records associated with the
selected message.

The first and most important option governing this behavior is:

- Variable: ebdb-mua-auto-update-p
  This option determines how EBDB acts upon mail addresses found in
  incoming messages.  If nil, nothing will happen.  Other options
  include the symbols 'search (only find existing records), 'update
  (only find existing records, and update their name and mail fields
  as necessary), 'query (find existing records, and query about the
  creation of new records), and 'create (automatically create new
  records).  A value of t is considered equivalent to 'create.  The
  option can also be set to a function which returns one of the above
  symbols.


*** Pop-up buffers
** EBDB and MUA summary buffers
EBDB can affect the way message senders are displayed in your MUA's
summary buffer.  It can do this in two ways: 1) by changing the way
the contact name is displayed, and 2) by optionally displaying a
one-character mark next to the contact's name.
*** Sender name display
EBDB can "unify" the name displayed for a sender that exists in the
database.  In general, an MUA will display the name part of the From:
header in the mailbox summary buffer.  EBDB can replace that display
name with information from the database.

- Variable: ebdb-message-clean-name-function
- Variable: ebdb-message-mail-as-name
- Variable: edb-mua-summary-unification-list

- Variable: ebdb-mua-summary-unify-format-letter
  Format letter to use for the EBDB-unified sender name in an MUA
  summary buffer.  Defaults to "E".

*** Summary buffer marks
EBDB can display a one-character mark next to the name of senders that
are in the database -- at present this is only possible in the Gnus
and VM MUAs.  This can be done in one of three ways.  From most
general to most specific:

- Variable: ebdb-mua-summary-mark
  Set to a single-character string to use for all senders in the EBDB
  database.  Set to nil to not mark senders at all.
- Function: ebdb-mua-make-summary-mark record
  This generic function accepts RECORD as a single argument, and
  returns a single-character string to be used as a mark.
- Field class: ebdb-field-summary-mark
  Give a record an instance of this field class to use a
  specific mark for that record.

Marks are displayed in MUA summary buffers by customizing the format
string provided by Gnus or VM, and adding the EBDB-specific format
code:

- Variable: ebdb-mua-summary-mark-format-letter
  Format letter to use in the summary buffer format string to mark a
  record.  Defaults to "e".
* EBDB Buffers
:PROPERTIES:
:ID:       877ca77a-06d6-4fbf-87ec-614d03c37e30
:END:
EBDB buffers inherit from special-mode, and so the usual special-mode
keybindings apply.

EBDB can create several separate buffers for displaying contacts.
Typically, each MUA creates its own EBDB buffer, with names like
\ast{}EBDB-Gnus\ast{}, etc.  Users can also create their own buffers
that won't be interfered with by MUA pop-up action.  Calling the
`ebdb' command directly will create such a "user-owned" buffer; it's
also possible to create more by using the `ebdb-clone-buffer' and
`ebdb-rename-buffer' commands within existing EBDB buffers.

- Variable ebdb-buffer-name
  The base string that is used to create EBDB buffers, without
  asterisks.  Defaults to "EBDB".

- "b c" ebdb-clone-buffer
  Prompt for a buffer name, and create a new EBDB buffer displaying
  the same records as the original buffer.
- "b r" ebdb-rename-buffer
  Rename the current EBDB buffer.  If this is done in a MUA pop-up
  buffer, the original buffer will be recreated next time the MUA
  requests another pop up.
** Searching
The most general search is performed with "/ /", which searches on
many different record fields and displays the results.

The EBDB major mode provides many keys for searching on specific
record fields.  Most of these keys are used after one of three prefix
keys, which change the behavior of the search: "/" clears the buffer
before displaying the results, "|" searches only among the records
already displayed, and "+" appends the search results to the records
already displayed.

For instance, record name search is on the key "n", meaning you can
use "/ n", "| n", or "+ n".  Search keys that work this way are:

- "n": Search names
- "o": Search organizations
- "p": Search phones
- "a": Search addresses
- "m": Search mails
- "x": Search user fields (prompts for which field to search on)

Search commands that currently only work with the "/" prefix are:

- "/ 1": Prompt for a single record, and display it
- "/ c": Search records that have been modified since last save
- "/ C": Search by record class
- "/ d": Search duplicate records
- "/ D": Prompt for a database and display all records belonging to
  that database
** Marking
Records can be marked and acted on in bulk.  The "#" key will toggle
the mark of the record under point.  "M-#" will toggle the marks of
all the records in the buffer, and "C-#" will unmark all records in
the buffer.  Many editing commands can act on multiple marked
records.
